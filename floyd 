// C++ program to implement the Floyd-Warshall algorithm
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

#define INF INT_MAX  // Define a large value as infinity

// Function to print the shortest distance matrix
void printSolution(const vector<vector<int>>& dist) {
    int V = dist.size();
    cout << "The following matrix shows the shortest distances\n"
         << "between every pair of vertices:\n\n";

    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            if (dist[i][j] == INF)
                cout << "INF\t";
            else
                cout << dist[i][j] << "\t";
        }
        cout << endl;
    }
}

// Function to implement the Floyd-Warshall algorithm
void floydWarshall(vector<vector<int>>& graph) {
    int V = graph.size();
    vector<vector<int>> dist = graph;  // Initialize distance matrix with the input graph

    // Update distances by considering all intermediate vertices
    for (int k = 0; k < V; ++k) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                // Check for overflow and update the shortest path
                if (dist[i][k] != INF && dist[k][j] != INF &&
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the final shortest distances
    printSolution(dist);
}

int main() {
    /*
        Graph:
            10
        (0) -----> (3)
         |         /|\
        5|          |
         |          | 1
        \|/         |
        (1) -----> (2)
              3
    */

    vector<vector<int>> graph = {
        {0,   5,   INF, 10},
        {INF, 0,   3,   INF},
        {INF, INF, 0,   1},
        {INF, INF, INF, 0}
    };

    // Run Floyd-Warshall algorithm
    floydWarshall(graph);

    return 0;
}
