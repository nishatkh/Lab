#include <iostream>
#include <vector>
#include <climits>
#include <map>
#include <iomanip>

using namespace std;

#define INF INT_MAX
const int V = 14; // Number of vertices

void printSolution(const vector<vector<int>>& dist, const map<int, string>& nodeNames) {
    int size = dist.size();
    cout << "Floyd-Warshall Algorithm - All Pairs Shortest Path Matrix\n";
    cout << "--------------------------------------------------------\n\n";

    cout << setw(20) << " ";
    for (int i = 0; i < size; ++i) {
        cout << setw(5) << i;
    }
    cout << "\n";

    for (int i = 0; i < size; ++i) {
        cout << setw(2) << i << " " << setw(17) << left << nodeNames.at(i) << right;
        for (int j = 0; j < size; ++j) {
            if (dist[i][j] == INF)
                cout << setw(5) << "INF";
            else
                cout << setw(5) << dist[i][j];
        }
        cout << "\n";
    }
}

void floydWarshall(vector<vector<int>>& graph, const map<int, string>& nodeNames) {
    vector<vector<int>> dist = graph;

    for (int k = 0; k < V; ++k) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                if (dist[i][k] != INF && dist[k][j] != INF &&
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    printSolution(dist, nodeNames);
}

int main() {
    map<int, string> nodeNames = {
        {0, "Admission office"}, {1, "AB-4"}, {2, "Food-Court"},
        {3, "Gym"}, {4, "Medical_Center"}, {5, "EngineeringBuilding"},
        {6, "Green_Garden"}, {7, "Central_Mosque"}, {8, "AB-1"},
        {9, "Innovation_Lab"}, {10, "Rowsonara_Hall"}, {11, "YKSG-2"},
        {12, "Transport"}, {13, "YKSG-1"}
    };

    vector<vector<int>> graph(V, vector<int>(V, INF));

    for (int i = 0; i < V; ++i) {
        graph[i][i] = 0;
    }

    // Set up connections
    graph[0][1] = 3; graph[0][6] = 9;
    graph[1][0] = 3; graph[1][2] = 13;
    graph[2][1] = 13; graph[2][3] = 5;
    graph[3][2] = 5; graph[3][4] = 8;
    graph[4][3] = 8; graph[4][11] = 10;
    graph[5][11] = 7;
    graph[6][7] = 6; graph[6][0] = 9;
    graph[7][6] = 6; graph[7][8] = 5;
    graph[8][7] = 5; graph[8][9] = 1; graph[8][12] = 4;
    graph[9][8] = 1; graph[9][10] = 12;
    graph[10][9] = 12; graph[10][11] = 15;
    graph[11][5] = 7; graph[11][4] = 10; graph[11][10] = 15;
    graph[12][8] = 4; graph[12][13] = 2;
    graph[13][12] = 2;

    floydWarshall(graph, nodeNames);
    return 0;
}
